using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;

class InstagramTests
{
    static void Main()
    {
        IWebDriver driver = new ChromeDriver();

        // Test Scenario 1: Login with Valid Credentials
        driver.Navigate().GoToUrl("https://www.instagram.com/");

        // Locate elements and perform actions
        IWebElement usernameInput = driver.FindElement(By.Name("username"));
        IWebElement passwordInput = driver.FindElement(By.Name("password"));
        IWebElement loginButton = driver.FindElement(By.CssSelector("button[type='submit']"));

        usernameInput.SendKeys("your_valid_username");
        passwordInput.SendKeys("your_valid_password");
        loginButton.Click();

        // Verify successful login by checking if the dashboard page is displayed
        bool isDashboardDisplayed = driver.Url.Contains("/dashboard/");
        if (isDashboardDisplayed)
        {
            Console.WriteLine("Test Scenario 1: Passed - User successfully logged in.");
        }
        else
        {
            Console.WriteLine("Test Scenario 1: Failed - User login unsuccessful.");
        }

        driver.Quit();
    
        // Test Scenario 2: Login with Invalid Credentials
        driver.Navigate().GoToUrl("https://www.instagram.com/");

        // Locate elements and perform actions
        IWebElement usernameInput = driver.FindElement(By.Name("username"));
        IWebElement passwordInput = driver.FindElement(By.Name("password"));
        IWebElement loginButton = driver.FindElement(By.CssSelector("button[type='submit']"));

        usernameInput.SendKeys("your_invalid_username");
        passwordInput.SendKeys("your_invalid_password");
        loginButton.Click();

        // Verify that the user sees an error message indicating invalid credentials
        IWebElement errorMessage = driver.FindElement(By.XPath("//div[contains(text(), 'Invalid credentials')]"));
        if (errorMessage.Displayed)
        {
        Console.WriteLine("Test Scenario 2: Passed - Error message displayed for invalid credentials.");
        }
        else
        {
        Console.WriteLine("Test Scenario 2: Failed - Error message not displayed for invalid credentials.");
        }

        driver.Quit();


        // Test Scenario 3: Password Recovery
        driver.Navigate().GoToUrl("https://www.instagram.com/");

        // Locate elements and perform actions
        IWebElement forgotPasswordLink = driver.FindElement(By.LinkText("Forgot Password?"));
        forgotPasswordLink.Click();

        IWebElement recoveryInput = driver.FindElement(By.Name("recoveryMethod"));
        IWebElement sendLoginLinkButton = driver.FindElement(By.XPath("//button[contains(text(), 'Send Login Link')]"));

        recoveryInput.SendKeys("your_email_or_phone_number");
        sendLoginLinkButton.Click();

        // Verify that the user receives a password recovery email or SMS (not testable with Selenium, manual verification needed).
        Console.WriteLine("Test Scenario 3: Passed - Password recovery initiated successfully.");

        driver.Quit();

        // Test Scenario 4: User Role-Based Access Control
        driver.Navigate().GoToUrl("https://www.instagram.com/");

        // Login with valid credentials (you can reuse the code from Test Scenario 1 here)

        // Navigate to the user's profile page
        driver.Navigate().GoToUrl("https://www.instagram.com/your_profile/");

        // Verify that the user has access to edit their own profile information
        bool canEditProfile = driver.FindElement(By.CssSelector("button[aria-label='Edit Profile']")).Displayed;
        if (canEditProfile)
        {
        Console.WriteLine("Test Scenario 4: Passed - User can edit their own profile information.");
        }
        else
        {
        Console.WriteLine("Test Scenario 4: Failed - User cannot edit their own profile information.");
        }

        // Navigate to another user's profile page
        driver.Navigate().GoToUrl("https://www.instagram.com/other_user_profile/");

        // Verify that the user does not have access to edit the other user's profile information
        bool canEditOtherProfile = driver.FindElements(By.CssSelector("button[aria-label='Edit Profile']")).Count == 0;
        if (canEditOtherProfile)
        {
        Console.WriteLine("Test Scenario 4: Passed - User cannot edit other user's profile information.");
        }
        else
        {
        Console.WriteLine("Test Scenario 4: Failed - User can edit other user's profile information.");
        }

        driver.Quit();
    }
}

